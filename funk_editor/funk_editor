#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond, per@sigmond.no
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

"""                                                                            
Edit midi files

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
import io
from mido import MidiFile, Message, tempo2bpm, MidiTrack, second2tick
import funk_midievent
from funk_patches import synths

DEFAULT_TEMPO = 500000
DEFAULT_TICKS_PER_BEAT = 480

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/funk_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/funk_proxy_in',
        help='path to output socket')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()

class funk_editor():

    context = None
    pub_socket = None
    sub_socket = None
    subpoller = None
    midi_file = None
    event_file = None
    event_tracks_changed_since_load = False
    filename = ""
    midievent = None
    synth_type = 'GS'
    
    def __init__(self, zmq_path_in, zmq_path_out):
        
        self.context = zmq.Context()
        self.pub_socket = self.context.socket(zmq.PUB)
        self.pub_socket.connect(zmq_path_out)
        time.sleep(1)
        self.log('started')
        
        self.sub_socket = self.context.socket(zmq.SUB)
        self.sub_socket.connect(zmq_path_in)
        self.sub_socket.setsockopt(zmq.SUBSCRIBE, 'editor')
        self.sub_socket.setsockopt(zmq.SUBSCRIBE, 'all')
        
        self.subpoller = zmq.Poller()
        self.subpoller.register(self.sub_socket, zmq.POLLIN)

        self.midievent = funk_midievent.funk_midievent()

    def log(self, log_msg):    
        topic = 'log'
        msg = {'entity' : 'editor',
               'msg' : log_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
            
    def error(self, error_msg):
        topic = 'error'
        msg = {'entity' : 'editor',
               'msg' : error_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    

    def send_ctrl_msg(self, topic, msg):
        print('Sending ctrl message [' + repr(topic) + ']')
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
        
    def handle_ctrl_msg(self, topic, msg):
        print('Got ctrl message')
        print('topic ' + repr(topic) + ' msg ' + repr(msg))
        if topic == 'editor':
            if msg['command'] == 'open':
                self.handle_open(msg)
            elif msg['command'] == 'save':
                self.handle_save(msg)
            elif msg['command'] == 'play':
                self.handle_play(msg)
            elif msg['command'] == 'cut_tracks_area':
                self.handle_cut_tracks_area(msg)
            elif msg['command'] == 'paste_tracks_area':
                self.handle_paste_tracks_area(msg)
            elif msg['command'] == 'undo_last_tracks_edit':
                self.handle_undo_last_tracks_edit(msg)
            elif msg['command'] == 'redo_last_tracks_edit':
                self.handle_redo_last_tracks_edit(msg)
            elif msg['command'] == 'select_notes_area':
                self.handle_select_notes_area(msg)
            elif msg['command'] == 'cut_notes':
                self.handle_cut_notes(msg)
            elif msg['command'] == 'paste_notes':
                self.handle_paste_notes(msg)
            elif msg['command'] == 'set_note_end':
                self.handle_set_note_end(msg)
            elif msg['command'] == 'set_note_velocity':
                self.handle_set_note_velocity(msg)
            elif msg['command'] == 'undo_last_notes_edit':
                self.handle_undo_last_notes_edit(msg)
            elif msg['command'] == 'redo_last_notes_edit':
                self.handle_redo_last_notes_edit(msg)
            elif msg['command'] == 'change_track_info':
                self.handle_change_track_info(msg)
            elif msg['command'] == 'create_new_track':
                self.handle_create_new_track(msg)
            elif msg['command'] == 'remove_track':
                self.handle_remove_track(msg)
            elif msg['command'] == 'track_recorded':
                self.handle_track_recorded(msg)
            else:
                print('Unknown editor command ' + repr(msg['command']))
                self.log('Unknown editor command ' + repr(msg['command']))
        elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Quitting')
                exit(0)

    def handle_open(self, msg):
        if msg['type'] ==  'file':
            self.log('opening ' + self.filename)
            self.filename = msg['name']
            self.midi_file = msg['obj']
            self.event_file = self.midievent.file2events(self.midi_file, self.filename)
            # event file and midi file is the same:
            self.event_tracks_changed_since_load = False
            self.load_file_to_player()
            self.client_load_synth()
            self.client_file_loaded()
        else:
            self.log('Unknown open type ' + repr(msg['type']))

    def handle_save(self, msg):
        if msg['type'] ==  'file':
            self.log('saving ' + self.filename)
            self.midi_file = self.midievent.events2file(self.event_file)
            obj = {'command': 'download',
                   'what': 'file',
                   'name': self.filename,
                   'obj': self.midi_file
                   }
            self.send_ctrl_msg('controller', obj)
        else:
            self.log('Unknown open type ' + repr(msg['type']))

    def handle_play(self, msg):
        if msg['what'] ==  'file':
            if self.event_tracks_changed_since_load:
                self.load_file_to_player()
            obj = {'command': 'play',
                   'start' : msg['start']
                   }
            self.send_ctrl_msg('player', obj)
        else:
            self.log('Unknown play what ' + repr(msg['what']))
                    
    def handle_cut_tracks_area(self, msg):
        print('editor got ' + repr(msg))
        area = msg['area']
        remove_space = msg['remove_space']
        affected_tracks = self.midievent.cut_tracks_area(self.event_file, area, remove_space)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_paste_tracks_area(self, msg):
        print('editor got ' + repr(msg))
        from_area = msg['from']
        to_area = msg['to']
        insert_space = msg['insert_space']
        merge = msg['merge']
        cut_or_copy = msg['cut_or_copy']
        affected_tracks = self.midievent.paste_tracks_area(self.event_file, from_area, to_area, insert_space, merge, cut_or_copy)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_undo_last_tracks_edit(self, msg):
        print('editor got ' + repr(msg))
        affected_tracks = self.midievent.undo_tracks_edit(self.event_file)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_redo_last_tracks_edit(self, msg):
        print('editor got ' + repr(msg))
        affected_tracks = self.midievent.redo_tracks_edit(self.event_file)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()


    def handle_select_notes_area(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        area = msg['area']
        notes = msg['notes']
        selected_events = self.midievent.select_notes_area(self.event_file, track_index, area, notes)
        print('selected_events ' + repr(selected_events))
        self.client_events_selected(track_index, selected_events)

    def handle_cut_notes(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        notes = msg['notes']
        affected_tracks = self.midievent.cut_notes(self.event_file, track_index, notes)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_paste_notes(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        tick = msg['tick']
        note = msg['note']
        cut_or_copy = msg['cut_or_copy']
        notes = msg['notes']
        affected_tracks = self.midievent.paste_notes(self.event_file, track_index, tick, note, cut_or_copy, notes)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_set_note_end(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        tick = msg['tick']
        note = msg['note']
        affected_tracks = self.midievent.set_note_end(self.event_file, track_index, note, tick)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_set_note_velocity(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        note = msg['note']
        value = msg['value']
        affected_tracks = self.midievent.set_note_velocity(self.event_file, track_index, note, value)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_undo_last_notes_edit(self, msg):
        print('editor got ' + repr(msg))
        affected_tracks = self.midievent.undo_notes_edit(self.event_file)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_redo_last_notes_edit(self, msg):
        print('editor got ' + repr(msg))
        affected_tracks = self.midievent.redo_notes_edit(self.event_file)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_change_track_info(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        name = msg['name']
        channel = msg['channel']
        affected_tracks = self.midievent.change_track_info(self.event_file, track_index, name, channel)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()

    def handle_create_new_track(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        name = msg['name']
        channel = msg['channel']
        affected_tracks = self.midievent.change_track_info(self.event_file, track_index, name, channel, True)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.midi_file.tracks.append(mido.MidiTrack())
            self.load_file_to_player()

    def handle_remove_track(self, msg):
        print('editor got ' + repr(msg))
        track_index = msg['track_index']
        affected_tracks = self.midievent.remove_track(self.event_file, track_index)
        if affected_tracks:
            self.client_tracks_changed(self.event_file['tracks'])
            self.midi_file = self.midievent.events2file(self.event_file)
            # event file and midi file is the same:
            self.event_tracks_changed_since_load = False
            self.load_file_to_player()

    def handle_track_recorded(self, msg):
        print('editor got ' + repr(msg))
        record_area = msg['record_area']
        track = msg['track']
        affected_tracks = self.midievent.track_recorded(self.event_file, record_area, track)
        if affected_tracks:
            self.client_tracks_changed(affected_tracks)
            self.event_tracks_changed_since_load = affected_tracks
            self.load_file_to_player()


    def load_file_to_player(self):
        if self.event_tracks_changed_since_load:
            for track in self.event_tracks_changed_since_load:
                self.midi_file.tracks[track['index']] = self.midievent.events2track(track)
        obj = {'command': 'load',
               'what': 'file',
               'obj': self.midi_file
               }
        self.send_ctrl_msg('player', obj)
        self.event_tracks_changed_since_load = False

    def client_load_synth(self):
        obj = {'command' : 'load_synth',
               'type' : self.synth_type,
               'synth' : synths[self.synth_type]
               }
        self.send_ctrl_msg('controller', obj)

    def client_file_loaded(self):
        obj = {'command' : 'file_loaded',
               'filename' : self.filename,
               'file' : self.encode_file_for_client()
               }
        self.send_ctrl_msg('controller', obj)

    def client_tracks_changed(self, tracks):
        obj = {'command' : 'tracks_changed',
               'tracks' : self.encode_tracks_for_client(tracks),
               'total_num_tracks' : len(self.event_file['tracks'])
               }
        self.send_ctrl_msg('controller', obj)

    def client_events_selected(self, track_index, events):
        obj = {'command' : 'events_selected',
               'track_index' : track_index,
               'events' : self.encode_events_for_client(events)
               }
        self.send_ctrl_msg('controller', obj)

    def encode_file_for_client(self):
        return self.event_file

    def encode_tracks_for_client(self, obj):
        return obj

    def encode_events_for_client(self, obj):
        return obj

def main():

    editor = funk_editor(args.data_bus_in, args.data_bus_out)
    
    while 1:
        try:
            clientsock = dict(editor.subpoller.poll(None))
            if clientsock:
                if editor.sub_socket in clientsock and clientsock[editor.sub_socket] == zmq.POLLIN:
                    topic = editor.sub_socket.recv()
                    ctrl_msg = editor.sub_socket.recv_pyobj()
                    editor.handle_ctrl_msg(topic, ctrl_msg)
        except:
            editor.error('editor got exception:' + repr(sys.exc_info()))
            exit(0)
    

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
