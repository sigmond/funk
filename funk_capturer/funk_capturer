#!/usr/bin/python
"""                                                                            
Grab MIDI events and send to message bus

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
from mido import MidiFile, Message, tempo2bpm

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-p', '--midi-port-in',
        dest='midi_port_in',
        default=None,
        help='midi input port')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played back')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


def connect_publisher(path):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect (path)
    return socket

def subscribe(socket, topic):
    socket.setsockopt(zmq.SUBSCRIBE, topic)

def open_input(port):
    return mido.open_input(port)


def send_rec_msg(socket, midi_msg):
    print('Sending midi message')
    socket.send_string('midi_rec', flags=zmq.SNDMORE)
    socket.send_pyobj(midi_msg)
    
    
def log(log_msg):
    global pub_socket
    
    topic = 'log'
    msg = {'entity' : 'capturer',
           'msg' : log_msg
           }
    pub_socket.send_string(topic, flags=zmq.SNDMORE)
    pub_socket.send_pyobj(msg)
    
def error(error_msg):
    global pub_socket
    
    topic = 'error'
    msg = {'entity' : 'capturer',
           'msg' : error_msg
           }
    pub_socket.send_string(topic, flags=zmq.SNDMORE)
    pub_socket.send_pyobj(msg)

def handle_open_input_port(msg):
    global inport
    print('handle_open_input_port')
    if inport != None:
        mido.close_input(inport)
    try:
        inport = mido.open_input(msg['port'])
    except:
        error('cannot open input port ' + repr(msg['port'])
    try:
        outport = open_port(msg['port'])
    except:
        error('cannot open output port ' + repr(msg['port'])

def handle_ctrl_msg(topic, ctrl_msg):
    global inport
    
    print('Got ctrl message')
    print('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg))
    if topic == 'capturer':
        if ctrl_msg['command'] == 'open_input_port':
            handle_open_input_port(ctrl_msg)
    elif topic == 'all':
        if ctrl_msg['command'] == 'quit':
            print ('Quitting')
            mido.close_input(inport)
            exit(0)



def main():
    global pub_socket
    global ctrl_socket
    global inport
    
    ctrl_socket = connect_subscriber(args.data_bus_in)
    subscribe(ctrl_socket, 'capturer')
    
    pub_socket = connect_publisher(args.data_bus_out)
    
    try:
        if args.midi_port_in != None:
            inport = mido.open_input(args.midi_port_in)
    except:
        msg = 'Error opening input port ' + args.midi_port_in
        print(msg)
        error(msg)
        exit(-1)

    # wait for the publisher to initialize before trying to send anything
    time.sleep(1)
    
    while 1:
        try:
            if inport != None:
                midi_message = inport.receive()
                send_rec_msg(pub_socket, midi_message)
            else:
                raise Exception('inport')
        except:
            # this should loop as long as inport is None
            log('got exception:' + sys.exc_info()[0])
            try:
                # if we got signalled, there should be a ctrl message coming within  a short time
                # otherwise we loop again waiting for e.g. an open port message or quit
                clientsock = dict(subpoller.poll(100))

                if clientsock:
                    if ctrl_socket in clientsock and clientsock[ctrl_socket] == zmq.POLLIN:
                        topic = ctrl_socket.recv()
                        ctrl_msg = ctrl_socket.recv_pyobj()
                        handle_ctrl_msg(topic, ctrl_msg)
            except:
                error('got exception:' + sys.exc_info()[0])

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
