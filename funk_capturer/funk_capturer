#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond, per@sigmond.no
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

"""                                                                            
Grab MIDI events and send to message bus

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
import signal
from mido import MidiFile, Message, tempo2bpm

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/funk_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/funk_proxy_in',
        help='path to output socket')

    arg('-p', '--midi-port-in',
        dest='midi_port_in',
        default=None,
        help='midi input port')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played back')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()

class funk_capturer:
    context = None
    pub_socket = None
    ctrl_socket = None
    subpoller = None
    inport = None
    inport_name = ""

    def __init__(self, data_bus_in, data_bus_out):
        self.inport = None
        self.inport_name = ""
    
        self.context = zmq.Context()
        self.pub_socket = self.connect_publisher(data_bus_out)
        time.sleep(1)
        self.log("started")
    
        self.ctrl_socket = self.connect_subscriber(data_bus_in)
        self.subscribe(self.ctrl_socket, 'capturer')

        signal.signal(signal.SIGHUP, self.receiveSignal)
    
        self.subpoller = zmq.Poller()
        self.subpoller.register(self.ctrl_socket, zmq.POLLIN)
    
    def receiveSignal(self, signalNumber, frame):
        print('got signal')
        topic = self.ctrl_socket.recv()
        ctrl_msg = self.ctrl_socket.recv_pyobj()
        self.handle_ctrl_msg(topic, ctrl_msg)
        raise Exception('signal')
    
    
    def connect_publisher(self, path):
        socket = self.context.socket(zmq.PUB)
        socket.connect(path)
        return socket

    def connect_subscriber(self, path):
        socket = self.context.socket(zmq.SUB)
        socket.connect(path)
        return socket

    def subscribe(self, socket, topic):
        socket.setsockopt(zmq.SUBSCRIBE, topic)

    def open_input(self, port):
        return mido.open_input(port)


    def send_rec_msg(self, socket, midi_msg):
        print('Sending midi message')
        socket.send_string('midi_rec', flags=zmq.SNDMORE)
        socket.send_pyobj(midi_msg)
    
    
    def log(self, log_msg):    
        topic = 'log'
        msg = {'entity' : 'capturer',
               'msg' : log_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    
    def error(self, error_msg):
        topic = 'error'
        msg = {'entity' : 'capturer',
               'msg' : error_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)

    def send_ctrl_msg(self, socket, topic, ctrl_msg):
        socket.send_string(topic, flags=zmq.SNDMORE)
        socket.send_pyobj(ctrl_msg)

    def handle_list_input_ports(self, msg):
        ports = mido.get_input_names()
        obj = {'command' : 'input_ports',
               'input_ports' : ports,
               'current_port' : self.inport_name
               }
        self.send_ctrl_msg(self.pub_socket, 'controller', obj)

    def handle_open_input_port(self, msg):
        print('handle_open_input_port')
        if self.inport != None:
            self.inport.close()
        try:
            self.inport = self.open_input(msg['port'])
            self.inport_name = msg['port']
        except:
            self.error('cannot open input port ' + repr(msg['port']))

    def handle_ctrl_msg(self, topic, ctrl_msg):
        print('Got ctrl message')
        print('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg))
        if topic == 'capturer':
            if ctrl_msg['command'] == 'open_input_port':
                self.handle_open_input_port(ctrl_msg)
            elif ctrl_msg['command'] == 'list_input_ports':
                self.handle_list_input_ports(ctrl_msg)
            else:
                self.log('unknown command ' + repr(ctrl_msg['command']))
        elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Quitting')
                self.inport.close()
                exit(0)



def main():
    capturer = funk_capturer(args.data_bus_in, args.data_bus_out)

    try:
        if args.midi_port_in != None:
            capturer.inport = capturer.open_input(args.midi_port_in)
            capturer.inport_name = args.midi_port_in
    except:
        msg = 'Error opening input port ' + args.midi_port_in
        print(msg)
        capturer.error(msg)
        exit(-1)
    
    while 1:
        try:
            if capturer.inport != None:
                midi_message = capturer.inport.receive()
                midi_message.time = time.time()
                capturer.send_rec_msg(capturer.pub_socket, midi_message)
            else:
                time.sleep(1)
        except KeyboardInterrupt:
            capturer.error('got exception: ' + repr(sys.exc_info()))
            exit(0)
        except:
            pass

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
