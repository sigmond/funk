#!/usr/bin/python
"""                                                                            
Send control sequences to other entities

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
import io
from mido import MidiFile, Message, tempo2bpm, MidiTrack, second2tick

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


def connect_subscriber(path):
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect (path)
    return socket

def connect_publisher(path):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect (path)
    return socket

def subscribe(socket, topic):
    socket.setsockopt(zmq.SUBSCRIBE, topic)

def send_ctrl_msg(socket, topic, ctrl_msg):
    print('Sending ctrl message [' + repr(topic) + '] ' + repr(ctrl_msg))
    socket.send_string(topic, flags=zmq.SNDMORE)
    socket.send_pyobj(ctrl_msg)
    

def handle_load(msg):
    print('handle_load')
    if msg['what'] == 'disc':
        midi_obj = MidiFile(msg['path'])
        obj = {'command' : 'load',
               'type': 'file',
               'midi_obj': midi_obj
               }
    elif msg['what'] == 'file':
        topic = 'file'
        obj = {'command': 'load',
               'type': 'file',
               'midi_obj': msg['midi_obj']
               }
    elif msg['what'] == 'track':
        obj = {'command': 'load',
               'type': 'track',
               'midi_obj': msg['midi_obj']
               }

    print('Calling send_ctrl_msg')
    send_ctrl_msg(pub_socket, 'player', obj)

def handle_play(msg):
    print('handle_play')
    obj = {'command': 'play'}
    send_ctrl_msg(pub_socket, 'player', obj)
    
    
def handle_stop(msg):
    obj = {'command': 'stop'}
    send_ctrl_msg(pub_socket, 'player', obj)
    send_ctrl_msg(pub_socket, 'recorder', obj)
    ##handle_panic()
    
def handle_channel(msg):
    print('handle_channel')
    obj = msg
    send_ctrl_msg(pub_socket, 'player', obj)
    
def handle_panic():
    obj = {'command': 'panic'}
    send_ctrl_msg(pub_socket, 'outputter', obj)
    
def handle_reset():
    obj = {'command': 'reset'}
    send_ctrl_msg(pub_socket, 'outputter', obj)
    
def handle_record(msg):
    if msg['what'] == 'record':
        obj = {'command': 'record'}
        send_ctrl_msg(pub_socket, 'recorder', obj)
        obj = {'command': 'play'}
        send_ctrl_msg(pub_socket, 'player', obj)
    if msg['what'] == 'stop':
        obj = {'command': 'stop'}
        send_ctrl_msg(pub_socket, 'recorder', obj)
        send_ctrl_msg(pub_socket, 'player', obj)
    
def handle_loopback(msg):
    send_ctrl_msg(pub_socket, 'capturer', obj)
    

def handle_ctrl_msg(topic, ctrl_msg):
    print('Got ctrl message')
    print('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg))
    if topic == 'controller':
        if ctrl_msg['command'] == 'load':
            handle_load(ctrl_msg)
        if ctrl_msg['command'] == 'play':
            handle_play(ctrl_msg)
        if ctrl_msg['command'] == 'stop':
            handle_stop(ctrl_msg)
        if ctrl_msg['command'] == 'channel':
            handle_channel(ctrl_msg)
        elif ctrl_msg['command'] == 'record':
            handle_record(ctrl_msg)
        elif ctrl_msg['command'] == 'loopback':
            handle_loopback(ctrl_msg)
        elif ctrl_msg['command'] == 'panic':
            handle_panic()
        elif ctrl_msg['command'] == 'reset':
            handle_reset()
        else:
            print('Unknown controller command ' + repr(ctrl_msg['command']))
    elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Killing capturer')
                os.system('pkill -f funk_capturer')
                print ('Quitting')
                exit(0)
    



def main():
    global pub_socket
    global ctrl_socket
    
    ctrl_socket = connect_subscriber(args.data_bus_in)
    pub_socket = connect_publisher(args.data_bus_out)
    
    subscribe(ctrl_socket, 'all')
    subscribe(ctrl_socket, 'controller')
    
    subpoller = zmq.Poller()
    subpoller.register(ctrl_socket, zmq.POLLIN)
    
    while 1:
        try:
            clientsock = dict(subpoller.poll(None))

            if clientsock:
                if ctrl_socket in clientsock and clientsock[ctrl_socket] == zmq.POLLIN:
                    topic = ctrl_socket.recv()
                    ctrl_msg = ctrl_socket.recv_pyobj()
                    handle_ctrl_msg(topic, ctrl_msg)
        except:
            exit(0)
    

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
