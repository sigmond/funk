#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond, per@sigmond.no
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

"""                                                                            
Send control sequences to other entities

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import time
import io
import os
from mido import MidiFile, Message, tempo2bpm, MidiTrack, second2tick
import funk_com
    
def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/funk_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/funk_proxy_in',
        help='path to output socket')

    arg('-p', '--websocket-port',
        dest='ws_port',
        default=9001,
        help='websocket port')

    arg('-t', '--websocket-host',
        dest='ws_host',
        default='127.0.0.1',
        help='websocket host')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()

class funk_controller():

    com = None

    def __init__(self, zmq_path_in, zmq_path_out, websocket_port=9001, websocket_host='127.0.0.1'):

        self.com = funk_com.funk_com(self, zmq_path_in, zmq_path_out, websocket_port, websocket_host)
        self.com.subscribe('all')
        self.com.subscribe('controller')
        self.com.subscribe('time')
        self.com.subscribe('error')
        self.com.subscribe('log')

    def error(self, msg):
        topic = 'error'
        msg = {'entity' : 'controller',
               'msg' : msg
               }
        self.handle_error(msg)

    def log(self, msg):
        topic = 'log'
        msg = {'entity' : 'controller',
               'msg' : msg
               }
        self.handle_log(msg)

    def handle_ctrl_message(self, topic, msg):
        print('Got ctrl message')
        #print('topic ' + repr(topic) + ' msg ' + repr(msg))
        print('topic ' + repr(topic))
        if topic == 'controller':
            print(' command ' + repr(msg['command']))
            if msg['command'] == 'open_output_port':
                # someone (e.g. the client) wants to open a midi port for output
                self.handle_open_output_port(msg)
            elif msg['command'] == 'open_input_port':
                # someone (e.g. the client) wants to open a midi port for input
                self.handle_open_input_port(msg)
            elif msg['command'] == 'open':
                # client is uploading something (e.g. a file)
                # to be opened by the editor
                self.handle_open(msg)
            elif msg['command'] == 'save':
                # client wants to get hold of something (e.g. a file)
                self.handle_save(msg)
            elif msg['command'] == 'download':
                # someone (e.g. the editor) wants to send something (e.g. a file)
                # to the client for saving
                self.handle_download(msg)
            elif msg['command'] == 'prepare':
                # someone (e.g. the client) wants to prepare something (e.g. a file)
                # for playing
                self.handle_prepare(msg)
            elif msg['command'] == 'load':
                # someone (e.g. the editor) wants to load something (e.g. a file)
                # for playing
                self.handle_load(msg)
            elif msg['command'] == 'play':
                # someone (e.g. the client) wants to start playing a loaded object (e.g. a file)
                self.handle_play(msg)
            elif msg['command'] == 'stop':
                # someone (e.g. the client) wants to stop playing and/or recording
                self.handle_stop(msg)
            elif msg['command'] == 'play_event':
                # someone (e.g. the client) wants to play a midi event
                self.handle_play_event(msg)
            elif msg['command'] == 'channel':
                # someone (e.g. the client) wants to change the play-mode for specific channels (e.g. mute)
                self.handle_channel(msg)
            elif msg['command'] == 'track':
                # someone (e.g. the client) wants to change the play-mode for specific tracks (e.g. mute)
                self.handle_track(msg)
            elif msg['command'] == 'record':
                # someone (e.g. the client) wants to start playing a loaded object (e.g. a file) and also record
                self.handle_record(msg)
            elif msg['command'] == 'loopback':
                # someone (e.g. the client) wants to change the loopback status of the outputter (on/off)
                # (loopback on means that events from the capturer are forwarded to the out device in real time by the outputter)
                self.handle_loopback(msg)
            elif msg['command'] == 'panic':
                # someone (e.g. the client) wants to stop all sound from the midi module
                self.handle_panic()
            elif msg['command'] == 'list_input_ports':
                # someone (e.g. the client) wants to know which input midi ports to choose from
                self.handle_list_input_ports()
            elif msg['command'] == 'input_ports':
                # someone (e.g. the capturer) wants to show list of input midi ports to choose from
                self.handle_input_ports(msg)
            elif msg['command'] == 'list_output_ports':
                # someone (e.g. the client) wants to know which output midi ports to choose from
                self.handle_list_output_ports()
            elif msg['command'] == 'output_ports':
                # someone (e.g. the outputter) wants to show list of output midi ports to choose from
                self.handle_output_ports(msg)
            elif msg['command'] == 'file_loaded':
                # someone (e.g. the editor) wants to show loaded midi file
                self.handle_file_loaded(msg)
            elif msg['command'] == 'tracks_changed':
                # someone (e.g. the editor) wants to show changed tracks
                self.handle_tracks_changed(msg)
            elif msg['command'] == 'events_selected':
                # someone (e.g. the editor) wants to show selected events
                self.handle_events_selected(msg)
            elif msg['command'] == 'cut_tracks_area':
                # someone (e.g. the client) wants to cut an area in a midi file
                self.handle_cut_tracks_area(msg)
            elif msg['command'] == 'paste_tracks_area':
                # someone (e.g. the client) wants to paste an area into a midi file
                self.handle_paste_tracks_area(msg)
            elif msg['command'] == 'undo_last_tracks_edit':
                # someone (e.g. the client) wants to undo last edit
                self.handle_undo_last_tracks_edit(msg)
            elif msg['command'] == 'redo_last_tracks_edit':
                # someone (e.g. the client) wants to redo last undone edit
                self.handle_redo_last_tracks_edit(msg)
            elif msg['command'] == 'select_notes_area':
                # someone (e.g. the client) wants to select notes area in a midi track
                self.handle_select_notes_area(msg)
            elif msg['command'] == 'cut_notes':
                # someone (e.g. the client) wants to cut notes in a midi track
                self.handle_cut_notes(msg)
            elif msg['command'] == 'paste_notes':
                # someone (e.g. the client) wants to paste notes into a midi track
                self.handle_paste_notes(msg)
            elif msg['command'] == 'set_note_end':
                # someone (e.g. the client) wants to set note end of a note
                self.handle_set_note_end(msg)
            elif msg['command'] == 'set_note_velocity':
                # someone (e.g. the client) wants to add to note velocity
                self.handle_set_note_velocity(msg)
            elif msg['command'] == 'undo_last_notes_edit':
                # someone (e.g. the client) wants to undo last notes edit
                self.handle_undo_last_notes_edit(msg)
            elif msg['command'] == 'redo_last_notes_edit':
                # someone (e.g. the client) wants to redo last undone notes edit
                self.handle_redo_last_notes_edit(msg)
            elif msg['command'] == 'change_track_info':
                # someone (e.g. the client) wants to change track info
                self.handle_change_track_info(msg)
            elif msg['command'] == 'create_new_track':
                # someone (e.g. the client) wants to create new track
                self.handle_create_new_track(msg)
            elif msg['command'] == 'remove_track':
                # someone (e.g. the client) wants to remove a track
                self.handle_remove_track(msg)
            else:
                self.log('Unknown controller command ' + repr(msg['command']))
                print('Unknown controller command ' + repr(msg['command']))
        elif topic == 'time':
            # someone (the player) has sent information about what position in the song (midi file) we are playing right now
            self.handle_time(msg)
        elif topic == 'error':
            # someone has experienced an error
            self.handle_error(msg)
        elif topic == 'log':
            # someone sent a log message
            self.handle_log(msg)
        elif topic == 'all':
            if msg['command'] == 'quit':
                # someone (e.g. the client) wants everything to stop/exit
                print ('Killing capturer')
                os.system('pkill funk_capturer')
                print ('Killing funk_proxy')
                os.system('pkill funk_proxy')
                print ('Quitting')
                exit(0)

    def handle_error(self, msg):
        print(repr(msg))
        self.com.send_client_error_msg('error', msg)
        
    def handle_log(self, msg):
        print(repr(msg))
        self.com.send_client_log_msg('log', msg)
            

    def handle_open_output_port(self, msg):
        obj = {'command': 'open_output_port',
               'port' : msg['port']
               }
        self.com.send_bus_msg('outputter', obj)
    
    def handle_open_input_port(self, msg):
        # this is supposed to bring the capturer out of the midi-read loop and
        # wait for a bus message:
        os.system('pkill -HUP funk_capturer')
        obj = {'command': 'open_input_port',
               'port' : msg['port']
               }
        self.com.send_bus_msg('capturer', obj)
    
    def handle_open(self, msg):
        print('handle_open')
        if msg['what'] == 'file':
            obj = {'command': 'open',
                   'type': 'file',
                   'name' : msg['name'],
                   'obj': msg['obj']
                   }
        else:
            self.log('unknown "what" ' + repr(what))
            print('unknown "what" ' + repr(what))
            return
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_save(self, msg):
        print('handle_save')
        if msg['what'] == 'file':
            obj = {'command': 'save',
                   'type': 'file'
                   }
        else:
            self.log('unknown "what" ' + repr(what))
            print('unknown "what" ' + repr(what))
            return
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_download(self, msg):
        print('handle_download')
        self.com.send_client_ctrl_msg('editor', msg)
        
    def handle_play(self, msg):
        print('handle_play')
        obj = {'command': 'play',
               'what' : 'file',
               'start' : msg['start']
               }
        self.com.send_bus_msg('editor', obj)
    
    
    def handle_stop(self, msg):
        obj = {'command': 'stop'}
        self.com.send_bus_msg('player', obj)
        self.com.send_bus_msg('recorder', obj)
    
    def handle_play_event(self, msg):
        obj = mido.Message.from_dict(msg['midi_event'])
        self.com.send_bus_msg('midi_play', obj)
    
    def handle_channel(self, msg):
        print('handle_channel')
        obj = msg
        self.com.send_bus_msg('player', obj)
    
    def handle_track(self, msg):
        print('handle_track')
        obj = msg
        self.com.send_bus_msg('player', obj)
    
    def handle_panic(self):
        obj = {'command': 'panic'}
        self.com.send_bus_msg('outputter', obj)
    
    def handle_list_input_ports(self):
        # this is supposed to bring the capturer out of the midi-read loop and
        # wait for a bus message:
        os.system('pkill -HUP funk_capturer')
        obj = {'command': 'list_input_ports'}
        self.com.send_bus_msg('capturer', obj)
    
    def handle_input_ports(self, msg):
        self.com.send_client_ctrl_msg('capturer', msg)
    
    def handle_list_output_ports(self):
        obj = {'command': 'list_output_ports'}
        self.com.send_bus_msg('outputter', obj)
    
    def handle_output_ports(self, msg):
        self.com.send_client_ctrl_msg('outputter', msg)
    
    def handle_file_loaded(self, msg):
        self.com.send_client_ctrl_msg('editor', msg)
    
    def handle_tracks_changed(self, msg):
        self.com.send_client_ctrl_msg('editor', msg)
    
    def handle_events_selected(self, msg):
        self.com.send_client_ctrl_msg('editor', msg)
    
    def handle_record(self, msg):
        obj = {'command': 'record',
               'start' : msg['start'],
               'track_index' : msg['track_index']
               }
        self.com.send_bus_msg('recorder', obj)
        obj['command'] = 'play'
        self.com.send_bus_msg('player', obj)
    
    def handle_loopback(self, msg):
        obj = {'command': 'loopback',
               'onoff' : msg['onoff']
               }
        self.com.send_bus_msg('outputter', obj)
    
    def handle_time(self, msg):
        self.com.send_client_time_msg('time', msg)


    def handle_cut_tracks_area(self, msg):
        print('handle_cut_tracks_area')
        obj = {'command': 'cut_tracks_area',
               'area' : msg['area'],
               'remove_space' : (msg['remove_space'] == 1)
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_paste_tracks_area(self, msg):
        print('handle_paste_tracks_area')
        obj = {'command': 'paste_tracks_area',
               'from' : msg['from'],
               'to' : msg['to'],
               'insert_space' : (msg['insert_space'] == 1),
               'merge' : (msg['merge'] == 1),
               'cut_or_copy' : msg['cut_or_copy']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_undo_last_tracks_edit(self, msg):
        print('handle_undo_last_tracks_edit')
        obj = {'command': 'undo_last_tracks_edit'
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_redo_last_tracks_edit(self, msg):
        print('handle_redo_last_tracks_edit')
        obj = {'command': 'redo_last_tracks_edit'
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    
    def handle_select_notes_area(self, msg):
        print('handle_select_notes_area')
        obj = {'command': 'select_notes_area',
               'track_index' : msg['track_index'],
               'area' : msg['area'],
               'notes' : msg['notes']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_cut_notes(self, msg):
        print('handle_cut_notes')
        obj = {'command': 'cut_notes',
               'track_index' : msg['track_index'],
               'notes' : msg['notes']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_paste_notes(self, msg):
        print('handle_paste_notes')
        if 'note' in msg:
            note = msg['note']
        else:
            note = -1
        obj = {'command': 'paste_notes',
               'track_index' : msg['track_index'],
               'tick' : msg['tick'],
               'note' : note,
               'cut_or_copy' : msg['cut_or_copy'],
               'notes' : msg['notes']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_set_note_end(self, msg):
        print('handle_set_note_end')
        obj = {'command': 'set_note_end',
               'track_index' : msg['track_index'],
               'tick' : msg['tick'],
               'note' : msg['note']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_set_note_velocity(self, msg):
        print('handle_set_note_velocity')
        obj = {'command': 'set_note_velocity',
               'track_index' : msg['track_index'],
               'note' : msg['note'],
               'value' : msg['value']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_undo_last_notes_edit(self, msg):
        print('handle_undo_last_notes_edit')
        obj = {'command': 'undo_last_notes_edit'
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_redo_last_notes_edit(self, msg):
        print('handle_redo_last_notes_edit')
        obj = {'command': 'redo_last_notes_edit'
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_change_track_info(self, msg):
        print('handle_change_track_info')
        obj = {'command': 'change_track_info',
               'track_index' : msg['track_index'],
               'name' : msg['name'],
               'channel' : msg['channel']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_create_new_track(self, msg):
        print('handle_create_new_track')
        obj = {'command': 'create_new_track',
               'track_index' : msg['track_index'],
               'name' : msg['name'],
               'channel' : msg['channel']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    def handle_remove_track(self, msg):
        print('handle_remove_track')
        obj = {'command': 'remove_track',
               'track_index' : msg['track_index']
               }
        print('Calling send_bus_msg')
        self.com.send_bus_msg('editor', obj)
        
    

def main():

    controller = funk_controller(args.data_bus_in, args.data_bus_out, args.ws_port, args.ws_host)



    
    while 1:
        try:
            messages = controller.com.poll_messages()
            if messages:
                for message in messages:
                    controller.handle_ctrl_message(message['topic'], message['msg'])
        except:
            controller.error('controller got exception:' + repr(sys.exc_info()))
            exit(0)
    

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
