#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

"""                                                                            
Play MIDI messages on output port

Example:

    funk_player

"""
from __future__ import print_function, division
import sys
import argparse
import time
import mido
import zmq
from mido import MidiFile, Message, tempo2bpm

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-p', '--midi-port-out',
        dest='midi_port_out',
        default=None,
        help='midi output port')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


class funk_outputter():
    outport = None
    outport_name = ""
    loopback = True
    context = None
    pub_socket = None
    subpoller = None

    def __init__(self, data_bus_in, data_bus_out):
        self.context = zmq.Context()
        self.pub_socket = self.connect_publisher(data_bus_out)

        time.sleep(1)
        self.log("started")
    
        self.outport = None
        self.outport_name = ""
        self.loopback = True

        self.midi_socket = self.connect_subscriber(data_bus_in)
        self.ctrl_socket = self.connect_subscriber(data_bus_in)
        
        self.subscribe(self.midi_socket, 'midi_play')
        self.subscribe(self.midi_socket, 'midi_rec')
        self.subscribe(self.ctrl_socket, 'all')
        self.subscribe(self.ctrl_socket, 'outputter')

        self.subpoller = zmq.Poller()
        self.subpoller.register(self.midi_socket, zmq.POLLIN)
        self.subpoller.register(self.ctrl_socket, zmq.POLLIN)
    
        
    def connect_publisher(self, path):
        socket = self.context.socket(zmq.PUB)
        socket.connect(path)
        return socket

    def connect_subscriber(self, path):
        socket = self.context.socket(zmq.SUB)
        socket.connect(path)
        return socket

    def subscribe(self, socket, topic):
        socket.setsockopt(zmq.SUBSCRIBE, topic)

    def open_output(self, port):
        return mido.open_output(port)

    def send_ctrl_msg(self, socket, topic, ctrl_msg):
        socket.send_string(topic, flags=zmq.SNDMORE)
        socket.send_pyobj(ctrl_msg)
    
    def log(self, log_msg):
        topic = 'log'
        msg = {'entity' : 'outputter',
               'msg' : log_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    
    def error(self, error_msg):
        topic = 'error'
        msg = {'entity' : 'outputter',
               'msg' : error_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    
    def handle_panic(self, port):
        print('handle_panic')
        if port != None:
            port.panic()
    
    def handle_loopback(self, msg):
        print('handle_loopback')
        if msg['onoff'] == 'on':
            self.loopback = True
        else:
            self.loopback = False

    def handle_list_output_ports(self, msg):
        ports = mido.get_output_names()
        msg = {'command' : 'output_ports',
               'output_ports' : ports,
               'current_port' : self.outport_name
               }
        self.send_ctrl_msg(self.pub_socket, 'controller', msg)
    

    def handle_open_output_port(self, msg):
        print('handle_open_output_port')
        if self.outport != None:
            self.outport.close()
        try:
            self.outport = self.open_output(msg['port'])
            self.outport_name = msg['port']
        except:
            self.error('cannot open output port ' + repr(msg['port']))


    def handle_midi_msg(self, port, topic, midi_msg):
        print('Got midi message')
        sys.stdout.write('topic ' + repr(topic) + ' msg ' + repr(midi_msg) + '\n')
        sys.stdout.flush()
        if topic != 'midi_rec' or self.loopback:
            if port != None:
                port.send(midi_msg)
    
    
    def handle_ctrl_msg(self, topic, ctrl_msg):
        print('Got ctrl message')
        print('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg))
        if topic == 'outputter':
            if ctrl_msg['command'] == 'panic':
                self.handle_panic(self.outport)
            elif ctrl_msg['command'] == 'loopback':
                self.handle_loopback(ctrl_msg)
            elif ctrl_msg['command'] == 'open_output_port':
                self.handle_open_output_port(ctrl_msg)
            elif ctrl_msg['command'] == 'list_output_ports':
                self.handle_list_output_ports(ctrl_msg)
            else:
                self.log('unknown command ' + repr(msg['command']))
        elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Quitting')
                exit(0)
    

def main():
    outputter = funk_outputter(args.data_bus_in, args.data_bus_out)
    
    try:
        if args.midi_port_out != None:
            outputter.outport = outputter.open_output(args.midi_port_out)
            outputter.outport_name = args.midi_port_out
    except:
        msg = 'Error opening output port ' + args.midi_port_out
        print(msg)
        outputter.error(msg)
        exit(-1)
        
    while 1:
        try:
            clientsock = dict(outputter.subpoller.poll(None))

            if clientsock:
                if outputter.midi_socket in clientsock and clientsock[outputter.midi_socket] == zmq.POLLIN:
                    topic = outputter.midi_socket.recv()
                    midi_msg = outputter.midi_socket.recv_pyobj()
                    outputter.handle_midi_msg(outputter.outport, topic, midi_msg)
                if outputter.ctrl_socket in clientsock and clientsock[outputter.ctrl_socket] == zmq.POLLIN:
                    topic = outputter.ctrl_socket.recv()
                    ctrl_msg = outputter.ctrl_socket.recv_pyobj()
                    outputter.handle_ctrl_msg(topic, ctrl_msg)     
        except:
            outputter.error('got exception: ' + repr(sys.exc_info()))
            if outputter.outport != None:
                outputter.outport.close()
            exit(0)

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
