#!/usr/bin/python
"""                                                                            
Play MIDI file object to message bus

Example:

    funk_player

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
from mido import MidiFile, Message, tempo2bpm

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played back')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


def connect_subscriber(path):
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect (path)
    return socket

def connect_publisher(path):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect (path)
    return socket

def subscribe(socket, topic):
    socket.setsockopt(zmq.SUBSCRIBE, topic)

def open_output(port):
    return mido.open_output(port)

def reset_output(output):
    output.reset()

def play_file(socket, midi_file, print_messages):
    print('Playing')
    length = midi_file.length
    print('Song length: {} minutes, {} seconds.'.format(
            int(length / 60),
            int(length % 60)))
    print('Tracks:')
    for i, track in enumerate(midi_file.tracks):
        print('  {:2d}: {!r}'.format(i, track.name.strip()))

    for message in midi_file.play(meta_messages=True):
        if print_messages:
            sys.stdout.write(repr(message) + '\n')
            sys.stdout.flush()

        if isinstance(message, Message):
            socket.send_string('play', flags=zmq.SNDMORE)
            socket.send_pyobj(message)
        elif message.type == 'set_tempo':
            print('Tempo changed to {:.1f} BPM.'.format(
                tempo2bpm(message.tempo)))

    print()


def handle_midi_msg(topic, midi_msg, socket):
    print('Got midi message')
    sys.stdout.write('topic ' + repr(topic) + ' msg ' + repr(midi_msg) + '\n')
    sys.stdout.flush()
    sys.stdout.write('socket ' + repr(socket) + '\n')
    sys.stdout.flush()
    if topic == 'file':
        print ('calling play')
        play_file(socket, midi_msg, true)
        
def handle_ctrl_msg(topic, ctrl_msg):
    print('Got ctrl message')
    sys.stdout.write('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg) + '\n')
    sys.stdout.flush()
    
def main():
    midi_socket = connect_subscriber(args.data_bus_in)
    ctrl_socket = connect_subscriber(args.data_bus_in)
    pub_socket = connect_publisher(args.data_bus_out)
    
    subscribe(midi_socket, 'file')
    subscribe(ctrl_socket, 'ctrl')
    
    subpoller = zmq.Poller()
    subpoller.register(midi_socket, zmq.POLLIN)
    subpoller.register(ctrl_socket, zmq.POLLIN)

    while 1:
        try:
            clientsock = dict(subpoller.poll(None))

            if clientsock:
                if midi_socket in clientsock and clientsock[midi_socket] == zmq.POLLIN:
                    topic = midi_socket.recv()
                    midi_msg = midi_socket.recv_pyobj()
                    handle_midi_msg(topic, midi_msg, pub_socket)
                if ctrl_socket in clientsock and clientsock[ctrl_socket] == zmq.POLLIN:
                    topic = ctrl_socket.recv()
                    ctrl_msg = ctrl_socket.recv_json()
                    handle_ctrl_msg(topic, ctrl_msg)
        except:
            pass
##            exit(0)

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
