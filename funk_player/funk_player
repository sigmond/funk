#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond, per@sigmond.no
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.


"""                                                                            
Play MIDI file object to message bus

Example:

    funk_player

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
from mido import MidiFile, Message, MetaMessage, tempo2bpm
from mido.frozen import freeze_message, thaw_message

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/funk_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/funk_proxy_in',
        help='path to output socket')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played back')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()




class funk_player():
    context = None
    ctrl_socket = None
    pub_socket = None
    playing = False
    midi_file = None
    muted_channels = []
    muted_tracks = []
    subpoller = None
    print_messages = False

    def __init__(self, data_bus_in, data_bus_out, print_messages):

        self.print_messages = print_messages
        self.context = zmq.Context()
        
        self.pub_socket = self.connect_publisher(data_bus_out)
        time.sleep(1)
        self.log("started")
    
        self.ctrl_socket = self.connect_subscriber(data_bus_in)
    
        self.subscribe(self.ctrl_socket, 'all')
        self.subscribe(self.ctrl_socket, 'player')
    
        self.subpoller = zmq.Poller()
        self.subpoller.register(self.ctrl_socket, zmq.POLLIN)

        self.playing = False
        self.midi_file = None
        self.muted_channels = []
        self.muted_tracks = []


    def connect_subscriber(self, path):
        socket = self.context.socket(zmq.SUB)
        socket.connect (path)
        return socket

    def connect_publisher(self, path):
        socket = self.context.socket(zmq.PUB)
        socket.connect (path)
        return socket

    def subscribe(self, socket, topic):
        socket.setsockopt(zmq.SUBSCRIBE, topic)

    def log(self, log_msg):
        topic = 'log'
        msg = {'entity' : 'player',
               'msg' : log_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    
    def error(self, error_msg):
        topic = 'error'
        msg = {'entity' : 'player',
               'msg' : error_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)

    def send_ctrl_msg(self, socket, topic, ctrl_msg):
##    print('Sending ctrl message [' + repr(topic) + '] ' + repr(ctrl_msg))
        socket.send_string(topic, flags=zmq.SNDMORE)
        socket.send_pyobj(ctrl_msg)

    def send_panic(self):
        obj = {'command': 'panic'}
        self.send_ctrl_msg(self.pub_socket, 'outputter', obj)

    def send_time(self, tick_now):
        obj = {'t': tick_now}
        self.send_ctrl_msg(self.pub_socket, 'time', obj)

    def send_start_sync(self, start_ticks, start_seconds):
        obj = {'command': 'start_sync',
               'start_ticks' : start_ticks,
               'start_seconds' : start_seconds
               }
        self.send_ctrl_msg(self.pub_socket, 'recorder', obj)


    def poll_ctrl_command(self):
    
        try:
            clientsock = dict(self.subpoller.poll(0.001))
        
            if clientsock:
                if self.ctrl_socket in clientsock and clientsock[self.ctrl_socket] == zmq.POLLIN:
                    topic = self.ctrl_socket.recv()
                    print('got topic ' + repr(topic))
                    ctrl_msg = self.ctrl_socket.recv_pyobj()
                    if self.handle_ctrl_msg(topic, ctrl_msg) == 'stop':
                        self.playing = False
                        return 'stop'
                    return ''
        except:
            error('got exception:' + repr(sys.exc_info()))
    
    
    
    def play(self, start_tick, meta_messages=False):

        # start with a default tempo
        tempo = 500000

        # sleep a maximum time between each check for control messages
        max_sleep_ticks = mido.second2tick(0.1, self.midi_file.ticks_per_beat, tempo)

        # always send all events with time 0 (typically channel setup)
        input_tick = 0

        # allow a little time for the module to be ready after the tick-zero events
        tick_now = start_tick - max_sleep_ticks
        start_seconds = time.time() + 0.1
        self.send_start_sync(start_tick, start_seconds)

        # this will give all messages of all tracks ordered by absolute tick
        # msg.time will be in delta ticks though
        for msg in mido.merge_tracks(self.midi_file.tracks):

            # remember absolute time of this message
            input_tick += msg.time

            # convert message to absolute time (needed for track number lookup)
            msg.time = input_tick
            
            # if tempo changes, recalculate the sleep time
            if msg.type == 'set_tempo':
                tempo = msg.tempo
                max_sleep_ticks = mido.second2tick(0.1, self.midi_file.ticks_per_beat, tempo)

            # skip all events between zero and start tick
            if (input_tick > 0) and (input_tick < start_tick):
                continue

            # calculate how long to wait until next event is to be played
            ticks_to_next_event = input_tick - tick_now

            # chop up the waiting (sleeping) to allow checking for control messages and inform client about timing
            while ticks_to_next_event > max_sleep_ticks:
                # check for control messages
                command = self.poll_ctrl_command()
                if command == 'stop':
                    return
                self.send_time(tick_now)
                time.sleep(0.1)
                ticks_to_next_event = ticks_to_next_event - max_sleep_ticks
                tick_now = tick_now + max_sleep_ticks

            # if remaining time less than max waiting time, wait that time
            if ticks_to_next_event > 0:
                self.send_time(tick_now)
                time.sleep(mido.tick2second(ticks_to_next_event, self.midi_file.ticks_per_beat, tempo))
                tick_now = tick_now + ticks_to_next_event
            
            # check for control messages
            command = self.poll_ctrl_command()
            if command == 'stop':
                return

            if isinstance(msg, MetaMessage) and not meta_messages:
                # don't play metamessages
                continue
            else:
                # play this event now
                yield msg


    def prepare_file(self):
    
        print('Preparing')
        length = self.midi_file.length
        print('Song length: {} minutes, {} seconds.'.format(
            int(length / 60),
            int(length % 60)))
        print('Tracks:')
        for i, track in enumerate(self.midi_file.tracks):
            print('  {:2d}: {!r}'.format(i, track.name.strip()))

        # create dictionary of all messages in file giving the track index of the message
        self.frozen_msg_dict = {}
        for track_index, track in enumerate(self.midi_file.tracks):
            now = 0
            for msg in track:
                now += msg.time
                self.frozen_msg_dict[freeze_message(msg.copy(time=now))] = track_index

        print('midi_file ' + repr(self.midi_file))

    def all_sounds_off_message(channel):
        ALL_SOUNDS_OFF = 120
        return Message(
            'control_change',
            channel=channel,
            control=ALL_SOUNDS_OFF
            )

            
    def play_file(self, start_tick, print_messages):

        self.playing = True

        # loop the message generator (will yield at appropriate realtime)
        for message in self.play(start_tick, meta_messages=False):
            # Instant mute/unmute track:
            # lookup track index of message
            track_index = self.frozen_msg_dict[freeze_message(message)]
            # only mute Message
            if isinstance(message, Message):
                muted = False
                # don't mute messages as time 0
                if message.time > 0:
                    if track_index in self.muted_tracks:
                        # mute
                        muted = True
                        if hasattr(message, 'velocity') or (message.type == 'note_off'):
                            if getattr(message, 'velocity') == 0:
                                # ... except if it is a note-off (to prevent hanging notes, works fine most of the time...)
                                muted = False

                # play if not muted
                if not muted:
                    self.pub_socket.send_string('midi_play', flags=zmq.SNDMORE)
                    self.pub_socket.send_pyobj(message)
            elif message.type == 'set_tempo':
                print('Tempo changed to {:.1f} BPM.'.format(
                    tempo2bpm(message.tempo)))
        

        print()
        self.playing = False


    def track2file(self, track):
        midi_file = MidiFile(type=1)
        midi_file.tracks.append(track)
        return midi_file


    def handle_load_command(self, msg):
        print('Got load command')
        if msg['what'] == 'track':
            print ('converting to file')
            self.midi_file = self.track2file(msg['obj'])
            print('midi_file ' + repr(self.midi_file))
        elif msg['what'] == 'file':
            self.midi_file = msg['obj']
            self.log('loaded midi file ' + repr(self.midi_file))

        self.prepare_file()
        return ''
        
    def handle_play_command(self, msg):
        print('Got play command')
        if self.midi_file != None:
            print ('calling play')
            self.play_file(msg['start'], self.print_messages)

##        self.muted_channels = []
##        self.muted_tracks = []
        return ''
        
    def handle_channel_command(self, msg):    
        print('Got channel command')
        self.muted_channels = msg['muted']
        return ''
        
    def handle_track_command(self, msg):    
        print('Got track command')
        self.muted_tracks = msg['muted']
        return ''
        
    def handle_stop_command(self, msg):    
        print('Got stop command, playing = ' + repr(self.playing))
##        self.muted_channels = []
##        self.muted_tracks = []
        self.send_panic()
        return 'stop'
        
    def handle_ctrl_msg(self, topic, msg):
        print('Got ctrl message')
        print('topic ' + repr(topic) + ' msg ' + repr(msg))
        if topic == 'player':
            if msg['command'] == 'load':
                return self.handle_load_command(msg)
            if msg['command'] == 'play':
                return self.handle_play_command(msg)
            elif msg['command'] == 'stop':
                return self.handle_stop_command(msg)
            elif msg['command'] == 'channel':
                return self.handle_channel_command(msg)
            elif msg['command'] == 'track':
                return self.handle_track_command(msg)
            else:
                print('Unknown ' + topic + ' command ' + repr(msg['command']))
        elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Quitting')
                exit(0)
    
    
def main():

    player = funk_player(args.data_bus_in, args.data_bus_out, args.print_messages)

    while 1:
        try:
            clientsock = dict(player.subpoller.poll(None))

            if clientsock:
                if player.ctrl_socket in clientsock and clientsock[player.ctrl_socket] == zmq.POLLIN:
                    topic = player.ctrl_socket.recv()
                    ctrl_msg = player.ctrl_socket.recv_pyobj()
                    player.handle_ctrl_msg(topic, ctrl_msg)
        except:
            player.error('got exception: ' + repr(sys.exc_info()))
            exit(0)

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
