#!/usr/bin/python
"""                                                                            
Play MIDI file on output port.

Example:

    funk_player

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
from mido import MidiFile, Message, tempo2bpm

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-p', '--midi-port-out',
        dest='midi_port_out',
        default='Hammerfall DSP:HDSP MIDI 2 24:32',
        help='midi output port')

    arg('-m', '--print-messages',
        dest='print_messages',
        action='store_true',
        default=False,
        help='Print messages as they are played back')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


def connect_subscriber(path):
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect (path)
    return socket

def subscribe(socket, topic):
    socket.setsockopt(zmq.SUBSCRIBE, topic)

def open_output(port):
    return mido.open_output(port)

def reset_output(output):
    output.reset()


def handle_midi_msg(port, topic, midi_msg):
    print('Got midi message')
    port.send(midi_msg)
    
    
def handle_ctrl_msg(topic, ctrl_msg):
    print('Got ctrl message')
    sys.stdout.write('topic ' + repr(topic) + ' msg ' + repr(ctrl_msg) + '\n')
    sys.stdout.flush()
    

def play_file(output, filename, print_messages):
    midi_file = MidiFile(filename) 

    print('Playing {}.'.format(midi_file.filename))
    length = midi_file.length
    print('Song length: {} minutes, {} seconds.'.format(
            int(length / 60),
            int(length % 60)))
    print('Tracks:')
    for i, track in enumerate(midi_file.tracks):
        print('  {:2d}: {!r}'.format(i, track.name.strip()))

    for message in midi_file.play(meta_messages=True):
        if print_messages:
            sys.stdout.write(repr(message) + '\n')
            sys.stdout.flush()

        if isinstance(message, Message):
            output.send(message)
        elif message.type == 'set_tempo':
            print('Tempo changed to {:.1f} BPM.'.format(
                tempo2bpm(message.tempo)))

    print()


def main():
    try:
        outport = mido.open_output(args.midi_port_out)
    except:
        print('Error opening output port %s' % args.midi_port_out)
        exit(-1)
        
    midi_socket = connect_subscriber(args.data_bus_in)
    ctrl_socket = connect_subscriber(args.data_bus_in)
    
    subscribe(midi_socket, 'play')
    subscribe(midi_socket, 'rec')
    subscribe(ctrl_socket, 'ctrl')
## Poll loop:
## Receive events for playing on midi_socket
## - events on 'play' topic should be queued up and sent to played according to timestamp
## - events on 'rec' topic (if enabled by control) should be played immediately (typically loopback from keyboard)
## Receive control-messages on ctrl_socket
## - it is important that control messages are handled asap (e.g. stop play or panic)
## - typical ctrl messages: add_port (name), del_port (name), start, stop, loop (on/off), panic
    subpoller = zmq.Poller()
    subpoller.register(midi_socket, zmq.POLLIN)
    subpoller.register(ctrl_socket, zmq.POLLIN)
    
    while 1:
        clientsock = dict(subpoller.poll(1))

        if clientsock:
            if midi_socket in clientsock and clientsock[midi_socket] == zmq.POLLIN:
                topic = midi_socket.recv()
                midi_msg = midi_socket.recv_pyobj()
                handle_midi_msg(outport, topic, midi_msg) 
            if ctrl_socket in clientsock and clientsock[ctrl_socket] == zmq.POLLIN:
                topic = ctrl_socket.recv()
                ctrl_msg = ctrl_socket.recv()
                handle_ctrl_msg(topic, ctrl_msg) 
    
    
##    try:
##        with mido.open_output(args.output_port) as output:
##            print('Using output {!r}.'.format(output.name))
##            output.reset()
##            try:
##                for filename in args.files:
##                    play_file(output, filename, args.print_messages)
##            finally:
##                print()
##                output.reset()
##    except KeyboardInterrupt:
##        pass

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
