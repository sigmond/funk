#!/usr/bin/python
"""                                                                            
Record MIDI events from message bus

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
import io
from mido import MidiFile, Message, tempo2bpm, MidiTrack, second2tick

DEFAULT_TEMPO = 500000
DEFAULT_TICKS_PER_BEAT = 480

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/data_bus_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/data_bus_proxy_in',
        help='path to output socket')

    arg('-b', '--ticks-per-beat',
        dest='ticks_per_beat',
        default=DEFAULT_TICKS_PER_BEAT,
        help='ticks per beat')

    arg('-t', '--tempo',
        dest='tempo',
        default=DEFAULT_TEMPO,
        help='microseconds per beat')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


def connect_subscriber(path):
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect (path)
    return socket

def connect_publisher(path):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect (path)
    return socket

def subscribe(socket, topic):
    socket.setsockopt(zmq.SUBSCRIBE, topic)


def handle_midi_msg(topic, midi_msg, delta_ticks):
    global track
    print('Got midi message, delta_ticks = %d' % delta_ticks)
    if topic == 'midi_rec':
        midi_msg.time = delta_ticks
        track.append(midi_msg)

def handle_record_command(msg):
    global recording
    global track
    global midi_file
    global last_Seconds
    
    track = MidiTrack()
    track.name = 'Capture'
    midi_file = mido.MidiFile(type=1)
    midi_file.tracks.append(track)
    last_seconds = time.time()
    recording = True
            
def handle_stop_command(msg):
    global pub_socket
    global track
    global midi_file
    global recording
    
    recording = False
    send_midi_msg(pub_socket, 'recorded', track)
    midi_file = None
    track = None
            
def handle_ctrl_msg(topic, msg):
    print('Got ctrl message')
    print('topic ' + repr(topic) + ' msg ' + repr(msg))
    if topic == 'recorder':
        if msg['command'] == 'record':
            handle_record_command(msg)
        elif msg['command'] == 'stop':
            return handle_stop_command(msg)
        else:
            print('Unknown player command ' + repr(msg['command']))
    elif topic == 'all':
        if ctrl_msg['command'] == 'quit':
            print ('Quitting')
            exit(0)

        
def send_midi_msg(socket, topic, midi_msg):
    print('Sending midi message [' + repr(topic) + '] ' + repr(midi_msg))
    socket.send_string(topic, flags=zmq.SNDMORE)
    socket.send_pyobj(midi_msg)


def main():
    global midi_socket
    global ctrl_socket
    global track
    global last_seconds
    global recording
    global pub_socket
    
    tempo = args.tempo
    ticks_per_beat = args.ticks_per_beat
    
    midi_socket = connect_subscriber(args.data_bus_in)
    ctrl_socket = connect_subscriber(args.data_bus_in)
    pub_socket = connect_publisher(args.data_bus_out)
    
    subscribe(midi_socket, 'midi_rec')
    subscribe(ctrl_socket, 'all')
    subscribe(ctrl_socket, 'recorder')    
    
    subpoller = zmq.Poller()
    subpoller.register(midi_socket, zmq.POLLIN)
    subpoller.register(ctrl_socket, zmq.POLLIN)

    recording = False
    track = None
    midi_file = None
    
    last_seconds = time.time()
    
    while 1:
        try:
            clientsock = dict(subpoller.poll(None))

            if clientsock:
                if midi_socket in clientsock and clientsock[midi_socket] == zmq.POLLIN:
                    now = time.time()
                    delta_ticks = int(round(second2tick(now - last_seconds, ticks_per_beat, tempo)))
                    last_seconds = now
                    topic = midi_socket.recv()
                    midi_msg = midi_socket.recv_pyobj()
                    if recording:
                        handle_midi_msg(topic, midi_msg, delta_ticks)
                if ctrl_socket in clientsock and clientsock[ctrl_socket] == zmq.POLLIN:
                    topic = ctrl_socket.recv()
                    ctrl_msg = ctrl_socket.recv_pyobj()
                    handle_ctrl_msg(topic, ctrl_msg)
        except:            
            exit(0)
    

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
