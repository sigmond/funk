#!/usr/bin/python

##    The FUNK Midi Sequencer
##
##    Copyright (C) 2020  Per Sigmond, per@sigmond.no
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.


"""                                                                            
Record MIDI events from message bus

"""
from __future__ import print_function, division
import sys
import argparse
import mido
import zmq
import time
import io
from mido import MidiFile, Message, tempo2bpm, MidiTrack, second2tick

DEFAULT_TEMPO = 500000
DEFAULT_TICKS_PER_BEAT = 480

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    arg = parser.add_argument

    arg('-i', '--data-bus-in',
        dest='data_bus_in',
        default='ipc:///tmp/funk_proxy_out',
        help='path to input socket')

    arg('-o', '--data-bus-out',
        dest='data_bus_out',
        default='ipc:///tmp/funk_proxy_in',
        help='path to output socket')

    arg('-b', '--ticks-per-beat',
        dest='ticks_per_beat',
        default=DEFAULT_TICKS_PER_BEAT,
        help='ticks per beat')

    arg('-t', '--tempo',
        dest='tempo',
        default=DEFAULT_TEMPO,
        help='microseconds per beat')

    arg('-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='print nothing')

    return parser.parse_args()


class funk_recorder:
    context = None
    pub_socket = None
    midi_socket = None
    ctrl_socket = None
    subpoller = None
    track = None
    start_seconds = None
    start_ticks = None
    recording = False
    tempo = None
    ticks_per_beat = None
    start_play = 0.0

    def __init__(self, data_bus_in, data_bus_out, tempo, ticks_per_beat):
        self.context = zmq.Context()
        self.pub_socket = self.connect_publisher(data_bus_out)
        
        time.sleep(1)
        self.log("started")
    
        self.tempo = tempo
        self.ticks_per_beat = ticks_per_beat
    
        self.midi_socket = self.connect_subscriber(data_bus_in)
        self.ctrl_socket = self.connect_subscriber(data_bus_in)

        self.subscribe(self.midi_socket, 'midi_rec')
        self.subscribe(self.ctrl_socket, 'rectime')
        self.subscribe(self.ctrl_socket, 'all')
        self.subscribe(self.ctrl_socket, 'recorder')    
    
        self.subpoller = zmq.Poller()
        self.subpoller.register(self.midi_socket, zmq.POLLIN)
        self.subpoller.register(self.ctrl_socket, zmq.POLLIN)

        self.recording = False
        self.track = MidiTrack()



    def connect_subscriber(self, path):
        socket = self.context.socket(zmq.SUB)
        socket.connect(path)
        return socket

    def connect_publisher(self, path):
        socket = self.context.socket(zmq.PUB)
        socket.connect(path)
        return socket

    def subscribe(self, socket, topic):
        socket.setsockopt(zmq.SUBSCRIBE, topic)

    def log(self, log_msg):
        topic = 'log'
        msg = {'entity' : 'recorder',
               'msg' : log_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    
    def error(self, error_msg):
        topic = 'error'
        msg = {'entity' : 'recorder',
               'msg' : error_msg
               }
        self.pub_socket.send_string(topic, flags=zmq.SNDMORE)
        self.pub_socket.send_pyobj(msg)
    

    def handle_midi_msg(self, topic, midi_msg):
        print('Got midi message')
        if topic == 'midi_rec':
            midi_msg.time = self.tick
            self.track.append(midi_msg)

    def handle_record_command(self, msg):
        print('handle_record_command')
        self.record_area = msg['record_area']
        self.recording = True
            
    def handle_stop_command(self, msg):
        self.recording = False
        if len(self.track) > 0:
            obj = {'command': 'track_recorded',
                   'record_area' : self.record_area,
                   'track' : self.track
                   }
            self.send_ctrl_msg(self.pub_socket, 'editor', obj)
        del self.track
        self.track = MidiTrack()
            
    def handle_ctrl_msg(self, topic, msg):
        if topic == 'rectime':
            self.tick = msg['t']
        elif topic == 'recorder':
            if msg['command'] == 'record':
                self.handle_record_command(msg)
            elif msg['command'] == 'stop':
                return self.handle_stop_command(msg)
            else:
                print('Unknown recorder command ' + repr(msg['command']))
        elif topic == 'all':
            if ctrl_msg['command'] == 'quit':
                print ('Quitting')
                exit(0)

        
    def send_ctrl_msg(self, socket, topic, msg):
        print('Sending ctrl message [' + repr(topic) + '] ' + repr(msg))
        socket.send_string(topic, flags=zmq.SNDMORE)
        socket.send_pyobj(msg)


def main():

    recorder = funk_recorder(args.data_bus_in, args.data_bus_out, args.tempo, args.ticks_per_beat)
    
    while 1:
        try:
            clientsock = dict(recorder.subpoller.poll(None))

            if clientsock:
                if recorder.midi_socket in clientsock and clientsock[recorder.midi_socket] == zmq.POLLIN:
                    topic = recorder.midi_socket.recv()
                    midi_msg = recorder.midi_socket.recv_pyobj()
                    if recorder.recording:
                        recorder.handle_midi_msg(topic, midi_msg)
                elif recorder.ctrl_socket in clientsock and clientsock[recorder.ctrl_socket] == zmq.POLLIN:
                    topic = recorder.ctrl_socket.recv()
                    ctrl_msg = recorder.ctrl_socket.recv_pyobj()
                    recorder.handle_ctrl_msg(topic, ctrl_msg)
        except:
            recorder.error('got exception:' + repr(sys.exc_info()))
            exit(0)
    

args = parse_args()

if args.quiet:
    def print(*args):
        pass

main()
